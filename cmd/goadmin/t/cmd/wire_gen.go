// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"admin/internal/admin"
	"admin/internal/app"
	"admin/internal/conf"
	"github.com/daodao97/goadmin/scaffold"
)

import (
	_ "github.com/mattn/go-sqlite3"
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func initApp() (*app.App, func(), error) {
	confConf, cleanup, err := conf.NewConf()
	if err != nil {
		return nil, nil, err
	}
	scaffoldConf, err := app.NewScaffoldConf(confConf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cache := app.NewCache(confConf)
	userState, err := scaffold.NewUserState(cache, scaffoldConf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	v := app.NewSso()
	options := &scaffold.Options{
		Conf:      scaffoldConf,
		UserState: userState,
		Cache:     cache,
		Sso:       v,
	}
	scaffoldScaffold := scaffold.New(options)
	ctrlOptions := &admin.CtrlOptions{
		Scaffold: scaffoldScaffold,
		Conf:     confConf,
	}
	v2, cleanup2, err := admin.NewCtrl(ctrlOptions)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	uploader := app.NewUploader(confConf)
	httpOptions := &app.HttpOptions{
		Conf:         confConf,
		ScaffoldConf: scaffoldConf,
		Ctrls:        v2,
		Uploader:     uploader,
		UserState:    userState,
		Scaffold:     scaffoldScaffold,
	}
	httpServer, cleanup3, err := app.NewHttpServer(httpOptions)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	appApp := app.NewApp(httpServer)
	return appApp, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
